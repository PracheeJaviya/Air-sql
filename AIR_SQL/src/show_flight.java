
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Panth
 */
public class show_flight extends javax.swing.JFrame {

    /**
     * Creates new form show_flight
     */
    String s_total;
    String origin;
    String dest;
    String arr;
    String dep;
    String s_passng;
//    String refno;
    String flightno;
    String s_index;
    String fare;
    String stops;
    String aircraft;
    String ebclass;
    String s_date;
    int i_index;
    int i_passng;
    int total;
    Connection conn = null;
    String refno = BCode.bcode(5);

    public show_flight() {
        initComponents();
    }

    public show_flight(String index, String ebclass, String date) throws SQLException {
        initComponents();
        conn = DB_Connect.connect();
        this.s_index = index;
        this.ebclass = ebclass;
        this.s_date = date;
        try {
            i_index = Integer.parseInt(s_index);
        }catch (NumberFormatException ex)
        {
            Logger.getLogger(show_flight.class.getName()).log(Level.SEVERE, null, ex);

        }
        try {
            String SQLQuery = "SELECT a.origin, a.dest, a.flightno , a.dep, a.arr, a.aircraft, a.stops, a.index, b.efare, b.bfare\n" + "FROM public.flightdetails a,public.fare b where a.aircraft=b.aircraft and a.index = ?;";
            PreparedStatement pst = conn.prepareStatement(SQLQuery);
            pst.setInt(1, i_index);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                System.out.println("i_index "+i_index);
                System.out.println(rs.getInt("index"));
                if(i_index == rs.getInt("index")) {
                    origin = rs.getString("origin");
                    dest = rs.getString("dest");
                    flightno = rs.getString("flightno");
                    dep = rs.getString("dep");
                    arr = rs.getString("arr");
                    aircraft = rs.getString("aircraft");
                    stops = rs.getString("stops");
                    if ("Economy".compareTo(ebclass) == 0) {
                        fare = rs.getString("efare");
                        System.out.println("efare me hu");
                    } else {
                        fare = rs.getString("bfare");
                        System.out.println("bfare me hu");
                    }
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(show_flight.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            s_total = Integer.toString(total);
            System.out.println(fare);
            System.out.println(total);
            System.out.println(s_total);

        }catch (NumberFormatException ex)
        {
            Logger.getLogger(show_flight.class.getName()).log(Level.SEVERE, null, ex);

        }
        jTextField1.setText(origin);
        jTextField2.setText(dest);
        jTextField3.setText(flightno);
        jTextField4.setText(fare);
        jTextField5.setText(dep);
        jTextField6.setText(arr);
        jTextField7.setText(aircraft);
        jTextField8.setText(stops);
        jTextField10.setText(s_date);
        index_.setText(s_index);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        submit_showflights = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        index_ = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Flight Details");

        jLabel1.setText("Origin :");

        jTextField1.setEditable(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Destination :");

        jLabel3.setText("Flight No. :");

        jLabel5.setText("Departure :");

        jLabel6.setText("Arrival :");

        jLabel7.setText("Aircraft :");

        jLabel8.setText("Stops :");

        jTextField2.setEditable(false);

        jTextField3.setEditable(false);

        jTextField5.setEditable(false);

        jTextField6.setEditable(false);

        jTextField7.setEditable(false);

        jTextField8.setEditable(false);

        jTextField4.setEditable(false);

        jLabel4.setText("Price :");

        submit_showflights.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        submit_showflights.setText("Submit");
        submit_showflights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    submit_showflightsActionPerformed(evt);
                } catch (SQLException throwables) {
                    throwables.printStackTrace();
                }
            }
        });

        jLabel10.setText("Flight Index :");

        index_.setEditable(false);

        jTextField10.setEditable(false);

        jLabel11.setText("Date :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField10)
                            .addComponent(jTextField4)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3)
                            .addComponent(jTextField5)
                            .addComponent(jTextField6)
                            .addComponent(jTextField7)
                            .addComponent(jTextField8, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                            .addComponent(index_)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(submit_showflights)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(index_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(submit_showflights)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void submit_showflightsActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_submit_showflightsActionPerformed

        i_passng = Integer.parseInt(JOptionPane.showInputDialog("Number of Passengers : "));
        int i;
        if(aircraft.compareTo("B787")==0 && (ebclass.compareTo("Economy")==0))
        {
            String SQLQUERY="Select count(class) from b787\n"+"where class = 'Economy';";
            PreparedStatement pt = conn.prepareStatement(SQLQUERY,ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = pt.executeQuery();

            while (rs.next())
            {
                if(i_passng<=(8-(rs.getInt("count")))  ) {
                    for (i = 0; i < i_passng; i++) {
                        try {
                            passng_details pd1;
                            pd1 = new passng_details(s_index, refno, ebclass, s_date);
                            pd1.setVisible(true);
                            pd1.setLocationRelativeTo(null);
                            dispose();

                        } catch (SQLException ex) {
                            Logger.getLogger(show_flight.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        System.out.println(i_passng);
                        try
                        {
                            B787E model;
                            model = new B787E(flightno,s_date,ebclass, refno,s_passng);
                            model.setVisible(true);
                            model.setLocationRelativeTo(null);

                        }catch(Exception e)
                        {
                            Logger.getLogger(show_flight.class.getName()).log(Level.SEVERE, null, e);

                        }
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Not enough seats available");

                }
            }

        }
        if(aircraft.compareTo("B787")==0&& (ebclass.compareTo("Business")==0))
        {
            String SQLQUERY="Select count(class) from b787\n"+"where class ='Business';";
            PreparedStatement pt = conn.prepareStatement(SQLQUERY,ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = pt.executeQuery();
            rs.beforeFirst();
            while (rs.next())
            {
                if(i_passng<=(4-(rs.getInt("count")))  ) {
                    for (i = 0; i < i_passng; i++) {
                        try {
                            passng_details pd1;
                            pd1 = new passng_details(s_index, refno, ebclass, s_date);
                            pd1.setVisible(true);
                            pd1.setLocationRelativeTo(null);
                            dispose();

                        } catch (SQLException ex) {
                            Logger.getLogger(show_flight.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        System.out.println(i_passng);

                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Not enough seats available");

                }
            }

        }
        if(aircraft.compareTo("A-319")==0&& (ebclass.compareTo("Economy")==0))
        {
            String SQLQUERY="Select count(class) from a319\n"+"where class ='Economy';";
            PreparedStatement pt = conn.prepareStatement(SQLQUERY,ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = pt.executeQuery();
            rs.beforeFirst();
            while (rs.next())
            {
                if(i_passng<=(10-(rs.getInt("count")))  ) {
                    for (i = 0; i < i_passng; i++) {
                        try {
                            passng_details pd1;
                            pd1 = new passng_details(s_index, refno, ebclass, s_date);
                            pd1.setVisible(true);
                            pd1.setLocationRelativeTo(null);
                            dispose();

                        } catch (SQLException ex) {
                            Logger.getLogger(show_flight.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        System.out.println(i_passng);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Not enough seats available");

                }
            }

        }
        if(aircraft.compareTo("A-319")==0&& (ebclass.compareTo("Business")==0))
        {
            String SQLQUERY="Select count(class) from a319\n"+"where class ='Business';";
            PreparedStatement pt = conn.prepareStatement(SQLQUERY,ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = pt.executeQuery();
            rs.beforeFirst();
            while (rs.next())
            {
                if(i_passng<=(6-(rs.getInt("count")))  ) {
                    for (i = 0; i < i_passng; i++) {
                        try {
                            passng_details pd1;
                            pd1 = new passng_details(s_index, refno, ebclass, s_date);
                            pd1.setVisible(true);
                            pd1.setLocationRelativeTo(null);
                            dispose();

                        } catch (SQLException ex) {
                            Logger.getLogger(show_flight.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        System.out.println(i_passng);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Not enough seats available");

                }
            }

        }
        if(aircraft.compareTo("A-320")==0&& (ebclass.compareTo("Economy")==0))
        {
            String SQLQUERY="Select count(class) from a320\n"+"where class ='Economy';";
            PreparedStatement pt = conn.prepareStatement(SQLQUERY,ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = pt.executeQuery();
            rs.beforeFirst();
            while (rs.next())
            {
                if(i_passng<=(10-(rs.getInt("count")))  ) {
                    for (i = 0; i < i_passng; i++) {
                        try {
                            passng_details pd1;
                            pd1 = new passng_details(s_index, refno, ebclass, s_date);
                            pd1.setVisible(true);
                            pd1.setLocationRelativeTo(null);
                            dispose();

                        } catch (SQLException ex) {
                            Logger.getLogger(show_flight.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        System.out.println(i_passng);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Not enough seats available");

                }
            }

        }
        if(aircraft.compareTo("A-320")==0&& (ebclass.compareTo("Business")==0))
        {
            String SQLQUERY="Select count(class) from a320\n"+"where class ='Business';";
            PreparedStatement pt = conn.prepareStatement(SQLQUERY,ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = pt.executeQuery();
            rs.beforeFirst();
            while (rs.next())
            {
                if(i_passng<=(4-(rs.getInt("count")))  ) {
                    for (i = 0; i < i_passng; i++) {
                        try {
                            passng_details pd1;
                            pd1 = new passng_details(s_index, refno, ebclass, s_date);
                            pd1.setVisible(true);
                            pd1.setLocationRelativeTo(null);
                            dispose();

                        } catch (SQLException ex) {
                            Logger.getLogger(show_flight.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        System.out.println(i_passng);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Not enough seats available");

                }
            }

        }
        if(aircraft.compareTo("B777-ER")==0&& (ebclass.compareTo("Economy")==0))
        {
            String SQLQUERY="Select count(class) from b777_er\n"+"where class ='Economy';";
            PreparedStatement pt = conn.prepareStatement(SQLQUERY,ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = pt.executeQuery();
//            rs.beforeFirst();
            while (rs.next())
            {
                if(i_passng<=(10-(rs.getInt("count")))  ) {
                    for (i = 0; i < i_passng; i++) {
                        try {
                            passng_details pd1;
                            pd1 = new passng_details(s_index, refno, ebclass, s_date);
                            pd1.setVisible(true);
                            pd1.setLocationRelativeTo(null);
                            dispose();

                        } catch (SQLException ex) {
                            Logger.getLogger(show_flight.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        System.out.println(i_passng);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Not enough seats available");

                }
            }

        }
        if(aircraft.compareTo("B777-ER")==0&& (ebclass.compareTo("Business")==0))
        {
            String SQLQUERY="Select count(class) from b777_er\n"+"where class ='Business';";
            PreparedStatement pt = conn.prepareStatement(SQLQUERY,ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = pt.executeQuery();
            rs.beforeFirst();
            while (rs.next())
            {
                if(i_passng<=(8-(rs.getInt("count")))  ) {
                    for (i = 0; i < i_passng; i++) {
                        try {
                            passng_details pd1;
                            pd1 = new passng_details(s_index, refno, ebclass, s_date);
                            pd1.setVisible(true);
                            pd1.setLocationRelativeTo(null);
                            dispose();

                        } catch (SQLException ex) {
                            Logger.getLogger(show_flight.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        System.out.println(i_passng);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Not enough seats available");

                }
            }

        }


    }//GEN-LAST:event_submit_showflightsActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) throws SQLException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(show_flight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(show_flight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(show_flight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(show_flight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField index_;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JButton submit_showflights;
    // End of variables declaration//GEN-END:variables
}
